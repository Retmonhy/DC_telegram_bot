from bot import bot
from math import ceil
from helpers import calculate_emeralds_per_cycle
from classes.CalculationModel import CalculationModel
from enums import CalculatorSteps, DarkRitualsAmount, Strategy
from telebot import types
import prettytable as pt
from classes.ModelStore import ModelStore

@bot.callback_query_handler(func=lambda callback: True)
def callback_handler(callback: types.CallbackQuery):
  # —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç
  if (callback.data == 'start_calculating'):
      # —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      model = CalculationModel()
      ModelStore.add_model(callback.message.chat.id, model)
      model.go_to_step(CalculatorSteps.last_mine_level)
      message_text = "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —à–∞—Ö—Ç—É. \n\n*–ü—Ä–∏–º–µ—Ä:* 7500 –∏–ª–∏ 12250"
      bot.send_message(callback.message.chat.id, message_text, reply_markup= types.ReplyKeyboardRemove(), parse_mode='markdown')
  
  model: CalculationModel = ModelStore.get_model_by_id(callback.message.chat.id)
  
  # –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤ –º–æ–¥–µ–ª–∏ –º–æ–¥ —Ä–∞—Å—á–µ—Ç–∞
  if (callback.data == 'mode_1'):
     model.set_dr_amount(DarkRitualsAmount.One)
     send_parameters_message(callback.message)
     # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
     model.go_to_step(CalculatorSteps.result)
  if (callback.data == 'mode_2'):
     model.set_dr_amount(DarkRitualsAmount.Two)
     send_parameters_message(callback.message)
     # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
     model.go_to_step(CalculatorSteps.result)
  if (callback.data == 'mode_3'):
     model.set_dr_amount(DarkRitualsAmount.Three)
     send_parameters_message(callback.message)
     # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
     model.go_to_step(CalculatorSteps.result)
  
  #  –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–µ—Ç: –±—É—Ç—ã–ª–∫–∏ –∏–ª–∏ –∏–∑—É–º—Ä—É–¥—ã
  if (callback.data == 'specify_bottles'):
      if (model.current_step != CalculatorSteps.bottles and model.current_step != CalculatorSteps.emeralds):
         model.set_strategy(Strategy.bottles)
         message_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –¢–¢"
         bot.send_message(callback.message.chat.id, message_text)
         model.go_to_step(CalculatorSteps.bottles)
  if (callback.data == 'specify_emeralds'):
      if (model.current_step != CalculatorSteps.bottles and model.current_step != CalculatorSteps.emeralds):
         model.set_strategy(Strategy.emeralds)
         message_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É–º—Ä—É–¥–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å"
         bot.send_message(callback.message.chat.id, message_text)
         model.go_to_step(CalculatorSteps.emeralds)

  # –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (callback.data == 'get_result'):
    if (model.level >= 0 and model.heroes and (model.emeralds or model.bottles)):
          calc_result = get_result(model)
          
          average_craft_emeralds_per_bottle = 4.25
          time = get_readable_time((calc_result.get('cycles_amount') * 10 * model.dark_ritual_amount))
          emeralds_from_craft: int = 0 
          
          message_text: str = ''
          if (model.strategy == Strategy.bottles):
             emeralds_from_craft = ceil(model.bottles * average_craft_emeralds_per_bottle)
             message_text = f'''–ó–∞ <b>{model.bottles} –±—É—Ç—ã–ª–æ–∫</b> –≤—ã –Ω–∞–±–µ—Ä–µ—Ç–µ <b>{calc_result.get('total_emeralds')} –∏–∑—É–º—Ä—É–¥–æ–≤</b>. 
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ <b>{calc_result.get('cycles_amount')}</b> –±–æ–ª—å—à–∏—Ö —Ü–∏–∫–ª–æ–≤ –∏ –∑–∞—Ç—Ä–∞—Ç–∏—Ç—å –º–∏–Ω–∏–º—É–º <b>{time} —á–∞—Å–æ–≤</b>.
–ó–∞ –±–æ–ª—å—à–æ–π —Ü–∏–∫–ª –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{calc_result.get('emeralds_per_cycle')} –∏–∑—É–º—Ä—É–¥–æ–≤</b>

<u>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</u>
–ó–∞ —Ç–æ –∂–µ —Å–∞–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫—Ä–∞—Ñ—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <b>{emeralds_from_craft}</b> –∏–∑—É–º—Ä—É–¥–æ–≤.
'''
          if (model.strategy == Strategy.emeralds):
             emeralds_from_craft = ceil(calc_result.get('total_bottles') * average_craft_emeralds_per_bottle)
             message_text = f'''–í—ã –Ω–∞–±–µ—Ä–µ—Ç–µ <b>{model.emeralds} –∏–∑—É–º—Ä—É–¥–æ–≤</b> –∑–∞ <b>{calc_result.get('cycles_amount')}</b> –±–æ–ª—å—à–∏—Ö —Ü–∏–∫–ª–æ–≤. 
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ç—Ä–∞—Ç–∏—Ç—å <b>{calc_result.get('total_bottles')} –±—É—Ç—ã–ª–æ–∫</b>
–ó–∞ –±–æ–ª—å—à–æ–π —Ü–∏–∫–ª –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{calc_result.get('emeralds_per_cycle')} –∏–∑—É–º—Ä—É–¥–æ–≤</b>
–ó–∞—Ç—Ä–∞—Ç–∏—Ç–µ –º–∏–Ω–∏–º—É–º <b>{time} —á–∞—Å–æ–≤</b>

<u>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</u>
–ó–∞ —Ç–æ –∂–µ —Å–∞–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫—Ä–∞—Ñ—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å <b>{emeralds_from_craft} –∏–∑—É–º—Ä—É–¥–æ–≤</b>.
'''
          bot.send_message(callback.message.chat.id, message_text, parse_mode='html')
          
          end_message_text = '–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—á–µ—Ç?'
          end_markup = types.InlineKeyboardMarkup()
          calc_again_button = types.InlineKeyboardButton(text='üöÄ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', callback_data="start_calculating")
          end_markup.add(calc_again_button)
          bot.send_message(callback.message.chat.id, end_message_text, reply_markup=end_markup)
    else:
      bot.send_message(callback.message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—á–µ—Ç')
  
  # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
  if (callback.data == 'calc_again'):
     model.reset_model()
     model.go_to_step(CalculatorSteps.start)


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def send_parameters_message(message: types.Message):
  model = ModelStore.get_model_by_id(message.chat.id)
  message_text = get_message_with_parameters(model)
  markup = types.InlineKeyboardMarkup()
  calculate_button = types.InlineKeyboardButton("üßÆ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data='get_result')
  markup.add(calculate_button)
  bot.send_message(message.chat.id, message_text, 'markdown', reply_markup=markup)

# —Ä–µ–∑—é–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
def get_message_with_parameters(model: CalculationModel):
  table = pt.PrettyTable(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
  table.align['–ü–∞—Ä–∞–º–µ—Ç—Ä'] = 'l'
  table.align['–ó–Ω–∞—á–µ–Ω–∏–µ'] = 'r'

  table.add_row(['–£—Ä–æ–≤–µ–Ω—å', ceil(model.level)])
  table.add_row(['–ì–µ—Ä–æ–∏', ceil(model.heroes)])
  
  if (model.strategy == Strategy.bottles):  
   table.add_row(['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫', model.bottles])
  else:
     table.add_row(['–ñ–µ–ª–∞–µ–º—ã–µ –∏–∑—É–º—Ä—É–¥—ã', model.emeralds])
  table.add_row(['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–† –∑–∞ –∫—Ä—É–≥', ceil(model.dark_ritual_amount)])

  return f'–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: \n```{table}```'

# –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—á–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
def get_result(model: CalculationModel) -> dict[str, int]:
   emeralds_per_cycle = calculate_emeralds_per_cycle(model.level, model.heroes, model.dark_ritual_amount)
   cycles_amount: int = 0
   total_bottles: int = 0
   total_emeralds: int = 0
   if (model.strategy == Strategy.bottles):
      cycles_amount = ceil(model.bottles / 480)
      total_emeralds = ceil(emeralds_per_cycle * cycles_amount)
   else:
      if (emeralds_per_cycle > 0):
         cycles_amount = ceil(model.emeralds / emeralds_per_cycle)
      total_bottles = ceil(cycles_amount * 480)

   return {'emeralds_per_cycle': emeralds_per_cycle, 'cycles_amount': cycles_amount, 'total_bottles': total_bottles, 'total_emeralds': total_emeralds}

# –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –º–∏–Ω—É—Ç—ã –≤ —á–∏—Ç–∞–µ–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è
def get_readable_time(time: float) -> str:
   hours = time // 60
   minutes = time % 60

   hours_string: str = f'''{hours}'''
   if (hours < 10):
      hours_string = f'''0{hours}'''
   
   minutes_string: str = f'''{minutes}'''
   if (minutes < 10):
      minutes_string = f'''0{minutes}'''

   return f'''{hours_string}:{minutes_string}'''