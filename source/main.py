from bot import * 
from helpers import calculate_emeralds_per_cycle
import prettytable as pt
from telebot import types
from math import *
from steps import CalculatorSteps
from StepsController import StepsController
from CalculationModel import CalculationModel
from command_handlers import *
from callback_handlers import *

@bot.message_handler(content_types=['text'])
def buttons(message):

  match StepsController.current_step:

    case CalculatorSteps.last_mine_level:
      # –≤–≤–æ–¥–∏—Ç —É—Ä–æ–≤–µ–Ω—å
      if (message.text.isdigit()):
        # –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏–ª–∏, —Ç–æ –º—ã —Å–µ—Ç—Ç–∏–º —É—Ä–æ–≤–µ–Ω—å –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —à–∞–≥ 
        StepsController.go_to_step(CalculatorSteps.heroes_amount)
        CalculationModel.set_level(int(message.text))
        message_text = f'''–ü–æ—Å–ª–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞ –∑–∞–ø–æ–Ω—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ *{CalculationModel.level}*.
–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —à–∞—Ö—Ç—ã.
–ü—Ä–∏–º–µ—Ä: 104 –∏–ª–∏ 76'''
        bot.send_message(message.chat.id, message_text, 'markdown')
      else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —à–∞—Ö—Ç—É")

    case CalculatorSteps.heroes_amount:
      # –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤
      if (message.text.isdigit()):
        StepsController.go_to_step(CalculatorSteps.emeralds)
        CalculationModel.set_heroes(int(message.text))
        bot.send_message(message.chat.id, "–ö–∞–∫ –º–Ω–æ–≥–æ –∏–∑—É–º—Ä—É–¥–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±—Ä–∞—Ç—å?")
      else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —à–∞—Ö—Ç—ã")

    case CalculatorSteps.emeralds:
      # –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É–º—Ä—É–¥–æ–≤
      if (message.text.isdigit()):
        StepsController.go_to_step(CalculatorSteps.result)
        CalculationModel.set_emeralds(int(message.text))
        message_text = get_message_with_parameters()
        markup = types.InlineKeyboardMarkup()
        calculate_button = types.InlineKeyboardButton("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", callback_data='get_result')
        markup.add(calculate_button)
        bot.send_message(message.chat.id, message_text, 'markdown', reply_markup=markup)
      else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑—É–º—Ä—É–¥–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å")

    case CalculatorSteps.result:
      if (message.text != "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
    case CalculatorSteps.end:
      value=1
    case _:
      bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
    



def get_message_with_parameters():
    table = pt.PrettyTable(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
    table.align['–ü–∞—Ä–∞–º–µ—Ç—Ä'] = 'l'
    table.align['–ó–Ω–∞—á–µ–Ω–∏–µ'] = 'r'

    data = [
        ('–£—Ä–æ–≤–µ–Ω—å', ceil(CalculationModel.level)),
        ('–ì–µ—Ä–æ–∏', ceil(CalculationModel.heroes)),
        ('–ò–∑—É–º—Ä—É–¥—ã', ceil(CalculationModel.emeralds)),
    ]
    for parameter, value in data:
        table.add_row([parameter, f'{value:.2f}'])

    return f'```–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: \n{table}```'

bot.polling(none_stop=True, interval=0)